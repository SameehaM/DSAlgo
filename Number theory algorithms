Name :- Binary Exponentiation :-
Code :- 
long long binpow(long long a, long long b) 
{
    if (b == 0)
        return 1;
    long long res = binpow(a, b / 2);             // USES RECURSION
    if (b % 2)
        return res * res * a;
    else
        return res * res;
}
Alternate Code :-
long long binpow(long long a, long long b) 
{
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;                        //WHILE LOOP
        a = a * a;
        b >>= 1;
    }
    return res;
}
Time complexity :- O(logn)
Applications :-
Effective computation of large exponents modulo a number // for every change in a do a = a % m 
	Code :- 
	long long binpow(long long a, long long b, long long m)
	{
		a %= m;
		long long res = 1;
		while (b > 0) 
		{
			if (b & 1)
				res = res * a % m;
			a = a * a % m;
			b >>= 1;
    	}
    return res;
	}
fibonnaci,apply permutations k times(just increase the power of permutation to kth power), 	

Name :- SieveOfEratosthenes

Find prime numbers upto n

ll prime[100000]; 
void SofE(int n) 
{ 
    for (int i = 2; i*i <= n; i++)
    {
        if (prime[i] == 0) 
        {
            for (int j = i*i; j <= n; j += i)
            {
                prime[j] = 1;
            }
        }
    }
    for (int i = 2; i <= n; i++)
        if(prime[i] == 0)
          cout<<i<<endl; 
} 
	
Time complexity :-  O(nloglogn)	
	
	
	
	
	
